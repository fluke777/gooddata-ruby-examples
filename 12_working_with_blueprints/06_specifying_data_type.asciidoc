=== Specifying data type in the blueprint
by Tomas Svarovsky

==== Problem
You would like to specify a different data type in a blueprint

==== Solution

Blueprints are easy to create programmatically and even to merge them together. In this example we will create a simple blueprint with one dataset and then add an additional field into blueprint and update the model.

[source,ruby]
----
# encoding: utf-8

require 'gooddata'

client = GoodData.connect
project = client.projects('project_id')

blueprint = GoodData::Model::ProjectBlueprint.build("my_blueprint") do |p|
  p.add_date_dimension("committed_on")

  p.add_dataset("repos") do |d|
    d.add_anchor("repo_id")
    d.add_attribute("name")
    d.add_date('opportunity_comitted', dataset: 'committed_on', format: "dd-MM-yyyy")
  end
end

project = client.create_project_from_blueprint(bp, auth_token: '')

update = GoodData::Model::ProjectBlueprint.build("update") do |p|
  p.add_dataset("repos") do |d|
    d.add_attribute("region")
  end
end

# update the model in the project
project.update_from_blueprint(blueprint.merge(update))

# now you can look at the model and verify there is new attribute present
project.attributes.find {|a| a.title == 'Region'}

----

==== Discussion

In the example above we have created a new model and updated it right away. This is not a typical situation however and there are couple of things that you need to be aware of.

It is more common that you would like to gradually update the model in an existing project as the new requirements arrive. For that to be possible you have to take the "old" blueprint from some place where it is persisted. We will show a basic way how to save a blueprint to a file.

[source,ruby]
----
# encoding: utf-8

require 'gooddata'

client = GoodData.connect('login', 'pass')
project = client.projects('project_id')
BLUEPRINT_FILE = 'blueprint_file.json'

blueprint = GoodData::Model::ProjectBlueprint.from_json(BLUEPRINT_FILE)

update = GoodData::Model::ProjectBlueprint.build('update') do |p|
  p.add_dataset('repos') do |d|
    d.add_attribute('region')
  end
end

new_blueprint = blueprint.merge(update)

unless new_blueprint.valid?
	pp new_blueprint.validate
	fail "New blueprint is not valid"
end

project.update_from_blueprint(new_blueprint)
new_blueprint.store_to_file(BLUEPRINT_FILE))

----